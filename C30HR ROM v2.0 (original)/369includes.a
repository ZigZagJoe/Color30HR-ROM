;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;369includes.a
;
;DESCRIPTION:
;	This is the common constants used by 369Color.a and 369Driver.a
;
;MAKEINFO:
;	na
;
;VERSION:
;	Version: 1.00
;	Micron Technology, Inc. © 1990/1991
;
;HISTORY:
;	121290	t.s.	Created. Correct Maverick offsets.
;	121890	t.s.	Add "sRsrcVV1kx1k", "sRsrcVV1kx512", "sRsrcVV1kx1k32",
;					"sRsrcVV1kx51232".
;	121990	t.s.	Add "SPRAMRecord".
;	011591	t.s.	Add resources for VGA, Portrait and Bartlett monitors.
;	112591	llsm	Changed board number 281 to 369.  Added Hungarian notation.
;	112791	llsm	Added more variables.
;	121291	llsm	Use ~, not Â, to reverse all of the bits.
;	121891	llsm	Changed the VGA clock from $00A 28.32 to $009 25.175.
;	010292	llsm	Changed from 64K to 256K ROM.
;	011492	llsm	Change ROM version number from 3 to 4, for Gambler with ~
;					G300 bit inverted.
;	052793	rb		This is the start of the HR series. I'm going to change 
;					the version number back down to 2.0 because it's almost
;					like a new rom
;NOTES:
;	~		Ones Complement			=		Equal to
;	Â	NOT	Not						<>	­	Not equal to
;	-		Unary negation			<		Less then
;	*		Multiplication			>		Greater than
;	/	DIV	Division				<=	²	Less than or equal to
;	//	MOD	Modulus division		>=	³	Greater than or equal to
;	+		Addition				**		Logical and
;	-		Subtraction				++	|	Logical or
;	>>		Shift right				--	XOR	Logical exclusive-or
;	<<		Shift left
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

kError			EQU		-1	; code for error

; Ordinarily, the ROMSize is the same as the CodeSize.  If the code can go in the
;	8K or 32K ROM, though, they are different in the 32K ROM.
kROMSize		EQU		32*1024		; 32K bytes 1/2/92
;kROMSize		EQU		8*1024		; 8K bytes, really
kCodeSize		EQU		16*1024		;rb NOTE 8 16K bytes
kColor8BoardID	EQU		$1E2		; per Rich Collyer Mac DTS
kColor8DeviceID	EQU		$146		; per Rich Collyer Mac DTS

sRsrcBoard		EQU		1

kFirstMonitor	EQU		128

sRsrc6x4Video	EQU		128			; 24-bit 6x4
sRsrcVGA		EQU		129			; 24-bit 6x4 VGA					(ts 1/15/91)
sRsrcPortrait	EQU		130			; 24-bit Portait					(ts 1/15/91)
sRsrcBartlett	EQU		131			; 24-bit Bartlett (512x342)			(ts 1/15/91)
sRsrcVV1kx1k	EQU		132			; 24-bit Virtual Video 1k x 1k
sRsrcVV1kx512	EQU		133			; 24-bit Virtual Video 1k x 512
sRsrctwelve		EQU		134			;rb  24 bit svga
sRsrcfifty		EQU		135			;rb NOTE 27 24 bit svga
sRsrcsixty		EQU		136			;rb NOTE 27 24 bit svga
sRsrcseventy	EQU		137			;rb NOTE 27 24 bit svga

sRsrc832x624	EQU		138			;rb  24 bit apple 16inch rgb
sRsrc1x7		EQU		139			;rb NOTE 27
;sRsrc6x4V70HZ	EQU		136			;rb NOTE 17

k32QDOffset		EQU		12			;rb NOTE 27

sRsrc6x4Video32	EQU		140			; 32-bit 6x4
sRsrcVGA32		EQU		141			; 32-bit 6x4 VGA					(ts 1/15/91)
sRsrcPortrait32	EQU		142			; 32-bit Portait					(ts 1/15/91)
sRsrcBartlett32	EQU		143			; 32-bit Bartlett (512x342)			(ts 1/15/91)
sRsrcVV1kx1k32	EQU		144			; 32-bit Virtual Video 1k x 1k
sRsrcVV1kx51232	EQU		145			; 32-bit Virtual Video 1k x 512
sRsrctwelveQ32	EQU		146			;rb 32-bit svga support
sRsrcfiftyQ32	EQU		147			;rb NOTE 27 24 bit svga
sRsrcsixtyQ32	EQU		148			;rb NOTE 27 24 bit svga
sRsrcseventyQ32	EQU		149			;rb NOTE 27 24 bit svga
sRsrc832x624Q32	EQU		150			;rb  32-bit apple 16inch support
sRsrc1x7Q32 	EQU		151			;rb NOTE 27

; ========================= Monitor type numbers ====================================
; These are normalized from the sRsrc values above
; NOTE : Their numbering depends on the ordering in Virtual Video init's ordering

kNotVirtual			EQU		0
kMonitorVV1kx1k		EQU		1
kMonitorVV2kx1k		EQU		2
kMonitorVV1kx512	EQU		3
kMonitorVV2kx2k		EQU		4

k6x4				EQU		1
kPortrait			EQU		2
kBartlett			EQU		3
kTwelve				EQU		4				;rb new nums added for normalizing
kfifty				EQU		5				;rb I don't know if these will be of any use??
ksixty				EQU		6				;rb NOTE 27
kseventy			EQU		7				;rb NOTE 27
k832x624			EQU		8				;rb NOTE 27
k1x7				EQU		9				;rb NOTE 27
; =============================== Constants =========================================
;kMyROMVersion		EQU		3			; 3 for Rev.E board (llsm 11/26/91)
;kMyROMVersion		EQU		4			; 4 for Rev.E board w/ Gambler (llsm 1/14/92)
kMyROMVersion		EQU		2			;rb start of HR series

kRowlongs			EQU		255			; Number of long words in one row - 1
kShortRowlongs		EQU		127			; Number of long words in one row - 1 (ts 4/5/91 for portrait and 1kx1K)
kRows				EQU		479			; Number of rows to init -1
kShortRows			EQU		1023		; Number of rows to init -1 (ts 4/11/91 for portrait and 1kx1K)

kMyRowBytes			EQU		1024		; Number of bytes per row
kMyBaseOffset		EQU		kMyRowBytes	; offset from Bart base of video memory to start of video resource.

kUnimplemented		EQU		$A89F		; can't use OPWORD declaration from include files

kFOpenAtStartBit	EQU		2
kF32BitModeBit		EQU		4

kFirstBitMode		EQU		oneBitMode						; 128
kLastBitMode		EQU		eightBitMode					; 131
kOneBitNorm			EQU		oneBitMode - kFirstBitMode		; 0
kTwoBitNorm			EQU		twoBitMode - kFirstBitMode		; 1
kFourBitNorm		EQU		fourBitMode - kFirstBitMode		; 2
kEightBitNorm		EQU		eightBitMode - kFirstBitMode	; 3
kFirstBitNorm		EQU		kOneBitNorm						; 0
kLastBitNorm		EQU		kEightBitNorm					; 3

; The External register contains the clock -- regardless of the monitor
k30Clock6x4			EQU	$000		; d0-d4 External Register -- clock 30.24 6x4
k15ClockBartlett	EQU	$001		; d0-d4 External Register -- clock 15.66 Bartlett
k57ClockPortrait	EQU	$004		; d0-d4 External Register -- clock 57.28 Portrait
k25Clock6x4VGA		EQU	$009		; d0-d4 External Register -- clock 25.175 VGA llsm 12/18/91
ktwelveClock		EQU $001		;rb NOTE 10
kfiftyClock			EQU	$00D		;rb NOTE 27
ksixtyClock			EQU	$00F		;rb NOTE 27
kseventyClock		EQU	$004		;rb NOTE 27
k832x624Clock		EQU $004		;rb NOTE 12
k1x7Clock			EQU $015		;rb NOTE 27

; The ExtModes register has the mode and the monitor in it
kEightExtMode		EQU	$000		; d0-d1 ExtModes Register -- 8-bit mode
kFourExtMode		EQU	$001		; d0-d1 ExtModes Register -- 4-bit mode
kTwoExtMode			EQU	$002		; d0-d1 ExtModes Register -- 2-bit mode
kOneExtMode			EQU	$003		; d0-d1 ExtModes Register -- 1-bit mode
k6x4Monitor			EQU	$000		; d2-d3 ExtModes Register -- 6x4
k6x4VGAMonitor		EQU	$004		; d2-d3 ExtModes Register -- 6x4VGA
kPortMonitor		EQU	$008		; d2-d3 ExtModes Register -- Portrait
kBartlettMonitor	EQU	$00C		; d2-d3 ExtModes Register -- Bartlett internal
kTweMonitor			EQU $000		;rb NOTE 16
kfiftyMonitor		EQU $000		;rb NOTE 27
ksixtyMonitor		EQU	$008		;rb NOTE 27
kseventyMonitor		EQU $008		;rb NOTE 27
k832x624Monitor   	EQU $008
k1x7Monitor			EQU $008		;rb NOTE 27

; =============================== Maverick ==========================================
kMavModeAReg		EQU		$00800000	; offset from the device base addr (ts 12/12/90)
kMavModeBReg		EQU		$00A00000	; offset from the device base addr (ts 12/12/90)
kMavClutBaseAddr	EQU		$00C00000	; offset from the device base addr (ts 12/12/90)

kMavClutWriteOffs	EQU		$000		; offset from ClutBaseAddr
kMavClutReadOffs	EQU		$00C		; offset from ClutBaseAddr
kMavClutDataRegOffs	EQU		$004		; offset from ClutBaseAddr
kMavClutMaskRegOffs	EQU		$008		; offset from ClutBaseAddr

; -----------------------------------------------------------------------------------
; Mode A Register offsets	(ts 12/3/90)
kMavAHFPorch		EQU	$000
kMavAHSync			EQU	$004
kMavAHBPorch		EQU	$008
kMavAHLine			EQU	$00C
kMavAVFPorch		EQU	$010
kMavAVSync			EQU	$014
kMavAVBPorch		EQU	$018
kMavAFrameLines		EQU	$01C
kMavAHSync22		EQU	$020
kMavARowMSBs		EQU	$024
kMavAColRow			EQU	$028
kMavAModesA			EQU	$02C
kMavAFS1			EQU	$030
kMavAFS2			EQU	$034
kMavAReqToTransDly	EQU	$038
kMavATransToReqDly	EQU	$03C

; -----------------------------------------------------------------------------------
; Mode B Register offsets	(ts 12/3/90)
kMavBExtMode		EQU	$000
kMavBRefreshCnt		EQU	$004
kMavBModesB			EQU	$008
kMavBZoom			EQU	$00C
kMavBNS				EQU	$010
kMavBInterruptClear	EQU	$014
kMavBExternal		EQU	$020


; ============================= Bit values ==========================================
kModesB_Video_Bit		EQU	$001					; ModesB register, Video On bit
kModesB_Interr_Bit		EQU	$002					; ModesB register, Interrupt bit
kModesB_IRE_Bit			EQU	$008					; ModesB register, IRE bit
kModesB_NoSnow_Bit		EQU	$020					; ModesB register, No Snow bit
kModesB_Sel_Bits		EQU	$600					; ModesB register, Debug Select bits

kModesB_Video_Bit_Mud	EQU	$01000000				; ModesB register, Video On bit muddled
kModesB_Interr_Bit_Mud	EQU	$02000000				; ModesB register, Interrupt bit muddled
kModesB_IRE_Bit_Mud		EQU	$08000000				; ModesB register, IRE bit muddled
kModesB_NoSnow_Bit_Mud	EQU	$20000000				; ModesB register, No Snow bit muddled
kModesB_Sel_Bits_Mud	EQU	$00C00000				; ModesB register, Debug Select bits muddled

kModesB_Video_Mask_Mud	EQU	~kModesB_Video_Bit_Mud	; ModesB register, Video On mask muddled
kModesB_Interr_Mask_Mud	EQU	~kModesB_Interr_Bit_Mud	; ModesB register, Interrupt mask muddled
kModesB_IRE_Mask_Mud	EQU	~kModesB_IRE_Bit_Mud	; ModesB register, IRE mask muddled
kModesB_NoSnow_Mask_Mud	EQU	~kModesB_NoSnow_Bit_Mud	; ModesB register, No Snow mask muddled
kModesB_Sel_Mask_Mud	EQU	~kModesB_Sel_Bits_Mud	; ModesB register, Debug Select mask muddled


kVend_ColGray_Bit		EQU	$002					; vendorUse5 (color/IRE), color/gray bit
kVend_ColGray_Mask		EQU	~kVend_ColGray_Bit		; vendorUse5 (color/IRE), color/gray mask

;;kExtModes_Mode_Bits		EQU	$003				; d0-d1 ExtModes register
;;kExtModes_Mon_Bits		EQU	$00C				; d2-d3 ExtModes register

kExtModes_Eight_Bit		EQU	$000
kExtModes_Four_Bit		EQU	$001
kExtModes_Two_Bit		EQU	$002
kExtModes_One_Bit		EQU	$003
kExtModes_6x4_Bit		EQU $000
kExtModes_6x4VGA_Bit	EQU $004
kExtModes_Port_Bit		EQU $008
kExtModes_Intern_Bit	EQU $00C

;kExtWr_Clock_Bits		EQU	$01F		; d0-d4 External register write

kExtRd_ExtMod3_Bit		EQU	$001		; d0 External register read
kExtRd_ExtMod2_Bit		EQU	$002		; d1 External register read
kExtRd_Bartlett_Bit		EQU	$004		; d2 External register read = Bartlett bit
kExtRd_CableOK_Bit		EQU	$008		; d3 External register read = cable OK bit
kExtRd_ExtMod0_Bit		EQU	$010		; d4 External register read
kExtRd_ExtMod1_Bit		EQU	$020		; d5 External register read
kExtRd_FreqAdj_Bit		EQU	$040		; d6 External register read
kExtRd_CBlank_Bit		EQU	$080		; d7 External register read = composite video


; *********** Specific Maverick register values ******************

; The DebugSel value must be 3 to do interrupts.
; The IRE Bit has been moved to the debug bit d3(Open & Interrupts On/Off care).
;	Standard ModesB values:  not used, not necessarily correct
;kIntOn			EQU	$0623	; ModesB register of ModesBReg:
;							; d0 = video timing enable (1 = on)
;							; d1 = interrupts (1 = on)
;							; d2 = NuBus Block Transfer enable (1 = on)
;							; d3 = Debug data -- IRE Bit
;							; d4 = row bank size (0 = 2Meg)
;							; d5 = No Snow Enable (1 = on)
;							; d6 = Seamless (0 = off)
;							; d7 = Split (0 = off)
;							; d8 = FIDsel (0 = off)
;							; d9 = DebugSel (0 = TRANSWAITB)
;							; d10 =	' '
;kIntOn_Mud		EQU	$DC200000
;
;kIntOff			EQU	$0621	; ModesB register of ModesBReg:
;							; d0 = video timing enable (1 = on)
;							; d1 = interrupts (0 = off)
;							; d2 = NuBus Block Transfer enable (1 = on)
;							; d3 = Debug data -- IRE Bit
;							; d4 = row bank size (0 = 2Meg)
;							; d5 = No Snow Enable (1 = on)
;							; d6 = Seamless (0 = off)
;							; d7 = Split (0 = off)
;							; d8 = FIDsel (0 = off)
;							; d9 = DebugSel (0 = TRANSWAITB)
;							; d10 =	' '
;kIntOff_Mud		EQU	$DE200000
;
;kVideoOn		EQU	$0601
;kVideoOn_Mud	EQU	$FE200000

; --------------------------------------------------------------------------------------------
; Data structure to read and write the slot parameter RAM.	(ts 12/19/90)
SPRAMRecord		RECORD		0
iBoardID		DS.W		1	; = color8BoardID
yVendorUse1		DS.B		1	; Screen Depth
yVendorUse2		DS.B		1	; Virtual Monitor Mode
yVendorUse3		DS.B		1	; Physical Monitor Type
yVendorUse4		DS.B		1	; Actual Monitor Resource Type
yVendorUse5		DS.B		1	; I.R.E. mode
yVendorUse6		DS.B		1
				ENDR


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;Muddle
;DESCRIPTION:
;	Muddle meaningful Icky Maverick register values with transformation for ~
;	Icky board and NuBus (will be reverse-muddled by board and bus by the ~
;	time the values get to Maverick).  This muddle transformation is unique ~
;	to Icky.
;DECLARATION:
;	MACRO MUDDLE;
;ARGUMENTS:
;	On Entry:	D1 = Icky register value to be transformed for output to ~
;				Icky.
;	On Exit:	D1 = transformed Icky register value, ready for output.
;EXAMPLE:
;	MUDDLE;
;HISTORY:
;	000091	l.s.	Created.
;	120391	llsm	Put Icky Muddle routine into the Bart driver.
;NOTES:
;	1.	This muddle transformation is unique to Icky.
;	2.	Muddle algorithm: Transformations
;		Move bits 0-7 to 24-31, and negate
;			0<=>F	4<=>B
;			1<=>E	5<=>A
;			2<=>D	6<=>9
;			3<=>C	7<=>8
;		Move bits 8-10 to 20-23 as follows ( *2 + 1 ), and negate
;			0 =>E	4 =>6
;			1 =>C	5 =>4
;			2 =>A	6 =>2
;			3 =>8	7 =>0
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		MACRO
		MUDDLE
		ROL.W		#8, D1		; swap bytes
		ROL.B		#1, D1		; transform bits 8-10: *2
		ADD.B		#1, D1		; transform bits 8-10: +1
		ROL.B		#4, D1		; move bits 8-10 temp. to 12-15
		NOT.W		D1			; negate all significant bits
		ROR.L		#8, D1		; move bits 0...10 to 20...31
		ROR.L		#8, D1
		ENDM


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;Mark_Progress
;DESCRIPTION:
;	Store progress code marker at b4 location of clock chip.
;DECLARATION:
;	MACRO MARK_PROGRESS;
;ARGUMENTS:
;	On Entry:	D4 = LongInt to be placed in address B4 of the clock chip.
;EXAMPLE:
;	MARK_PROGRESS;
;HISTORY:
;	000091	ls		Created.
;	120591	llsm	Copied from Icky to Bart.
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		MACRO
		MARK_PROGRESS
		MOVEM.L	A0/D0, -( SP )
		MOVE.L	D4, -( SP )
		MOVE.L	SP, A0					; BufferAddress into A0
		MOVE.L	#$000400B4, D0			; Length, Clock Address
		_WriteXPRam
		MOVE.L	( SP )+, D0
		MOVEM.L	( SP )+, A0/D0

		ENDM


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;Store_Error
;DESCRIPTION:
;	Store error exit code marker at b0 location of clock chip.
;DECLARATION:
;	MACRO STORE_ERROR;
;ARGUMENTS:
;	On Entry:	D4 = LongInt to be placed in address B0 of the clock chip.
;EXAMPLE:
;	STORE_ERROR;
;HISTORY:
;	000091	ls		Created.
;	120591	llsm	Copied from Icky to Bart.
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		MACRO
		STORE_ERROR
		MOVEM.L	A0/D0, -( SP )
		MOVE.L	D4, -( SP )
		MOVE.L	SP, A0					; BufferAddress into A0
		MOVE.L	#$000400B0, D0			; Length, Clock Address
		_WriteXPRam
		MOVE.L	( SP )+, D0
		MOVEM.L	( SP )+, A0/D0

		ENDM


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;Cable_Detect
;DESCRIPTION:
;	Determine whether internal or external monitor is present by reading cable.  ~
;	Cable Test:
;	0)	Initalize Maverick (prior to this macro).	
;	1)	Turn on video (prior to this macro).	
;	2)	Fill CLUT with "C0".
;	3)	Write Cable Detect regs.
;	4)	Check External reg of ModeBReg Maverick register in loop.  ~
;		Loop until composite video bits goes high.
;DECLARATION:
;	MACRO CABLE_DETECT;
;ARGUMENTS:
;	On Entry:	Asssumed that Maverick already initalized.
;				Assumed that video already on.
;				A2 = 32-bit base address of board.
;	On Exit:	D0 = 0 if cable detected.
;				D0 = 1 if no cable found.
;				D0 = FFFF if no monitor detected.
;EXAMPLE:
;	CABLE_DETECT;
;HISTORY:
;	071591	ls		Created.  Based on similar code in Bart 281Color.a.
;	100391	llsm	Changed timeout limit (number of tries) from $FFFFFFFF to ~
;					$FFFF times (Chuck Snodgrass).  DBRA only does words.
;	120691	llsm	Copied from Icky to Bart.  Only check for cable, don't try ~
;					to determine which monitor.
;	121191	llsm	The CableOK bit is reversed from Icky's bit.
;	121991			CableOK bit put back the way it was.
;NOTES:
;	1.	If there is a monitor attached, the extra resistance changes the ~
;		voltage.  Write a fairly bright gray (monitor type doesn't matter; ~
;		if the monitor type is wrong the picture won't work but we don't ~
;		care).  Wait until finish row and start another, then check the ~
;		voltage while writing one pixel.
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		MACRO
		CABLE_DETECT

BaseA2	SET	A2
ModeD6	SET	D6

		MOVEM.L		A0/D1-D6, -(SP)
		MOVE.L		BaseA2, A0			; Fill Entry Table with "C0"
		MOVE.B		#true32b, D0
		_SwapMMUMode					; Set to 32-bit addressing mode
		ADDA.L		#kMavClutBaseAddr, A0
		MOVE.L		#0, kMavClutWriteOffs(A0)	;Start of Entry Table
		MOVE.L		#$C0C0C0C0, D4		; the Data for medium gray
		MOVE.L		#$300, D2			; 256 Entries * 3(RGB)

@xero1
		MOVE.L		D4, kMavClutDataRegOffs(A0)	; Write the Data
		DBRA		D2, @xero1			; til done

		_SwapMMUMode					; Back to original address mode

;	3)	Check External reg in loops.
;		a)	Wait for composite video blank to go lo
;		b)	Wait for composite video blank to go hi
;		c)	Sample cable bit {til composite video blank goes lo} once
		MOVE.L		BaseA2, A0			; A0 = base address of Bart board
		ADD.L		#kMavModeBReg, A0	; A0 = base address of Maverick ModeBReg
		MOVE.W		#$FFFF, D5			; timeout limit = number of tries

		MOVE.B		#true32b, D0
		_SwapMMUMode					; Set to 32-bit addressing mode
		MOVE.L		D0, ModeD6			; D6 = original addressing mode

;		a)	Wait for composite video blank goes lo
@xero2
		MOVE.L		kMavBExternal(A0), D3
		ANDI.L		#kExtRd_CBlank_Bit, D3	; d2 bit = composite video
		BEQ.S		@xero3i
		DBRA		D5, @xero2			; keep checking until get lo or timeout
		BRA.S		@errExit			; timed out, exit with error
;		b)	Wait for composite video blank goes hi
@xero3i
		MOVE.W		#$FFFF, D5			; timeout limit = number of tries
@xero3
		MOVE.L		kMavBExternal(A0), D3
		ANDI.L		#kExtRd_CBlank_Bit, D3		; d2 bit = composite video
		BNE.S		@imask				; high, leave loop
		DBRA		D5, @xero3			; keep waiting for high until timeout
		BRA.S		@errExit			; timed out, exit with error

@imask
;		c)	Sample external register til composite video blank goes lo
		MOVE.W		#$FFFF, D5			; timeout limit = number of tries
		MOVE.L		#0, D0				; D0 = 0 = cable bit assumed clear at start =
										;	cable present
@xero4
		MOVE.L		kMavBExternal(A0), D3
		MOVE.L		D3, D2
		ANDI.L		#kExtRd_CableOK_Bit, D2
		BEQ.S		@xero4a				; 12/19/91
		MOVE.L		#1, D0				; D0 = true = cable bit set = no cable
@xero4a
		ANDI.L		#kExtRd_CBlank_Bit, D3	; d2 = composite video
		BEQ.S		@xero5
		DBRA		D5, @xero4			; keep checking until lo or timeout
		BRA.S		@errExit			; timed out, exit with error
@xero5
		BRA.S		@EndCable		; llsm 12/6/91
@errExit
		MOVE.L		#$FFFF, D0		; indicate no monitor valid D0 = FFFF
@EndCable		; llsm 12/6/91
		MOVE.L		D0, -(SP)		; save exit code during swapmmumode

		MOVE.L		ModeD6, D0		; D0 = original address mode
		_SwapMMUMode				; Back to original address mode

		MOVE.L		(SP)+, D0		; D0 = exit code
		MOVEM.L		(SP)+, A0/D1-D6
		ENDM

